#include <iostream>
#include <vector>
#include "ClassicFuzzyMatching.h"
#include "TokenBasedMatching.h"

std::vector<std::string> companies = {
        "SIA \"WavePath",
        "SIA WaveSolutions",
        "InnovationsBright Sp. z.o.o.",
        "LLC LineConsulting",
        "NestBlue L.L.C.",
        "UrbanSunrise SIA",
        "OÜ ''EnterprisesLine''",
        "Sabiedrība ar ierobežotu atbildību LeafPerformance",
        "L.L.C. WavePerformance",
        "LLC ConsultingMarketing",
        "Sabiedrība ar ierobežotu atbildību FitnessGate",
        "UrbanBlue Sp. z.o.o.",
        "L.L.C. ConsultingFitness",
        "Sp. z.o.o. TechnologiesMarketing",
        "SilverHarmony SP ZOO",
        "GateSilver OÜ",
        "OU UrbanMarketing",
        "BlueEnterprises Sabiedrība ar ierobežotu atbildību",
        "SolutionsGolden L.L.C.",
        "L.L.C. FitnessInnovations",
        "GateNest OÜ",
        "BlueClear Sp. z.o.o.",
        "GoldenBlue OU",
        "'HarmonyHealth\" L.L.C.",
        "LLC HealthGolden",
        "L.L.C. PerformanceFitness",
        "Sabiedrība ar ierobežotu atbildību PathEnterprises",
        "LineClear OÜ",
        "Sp. z.o.o. WaveUrban",
        "SP ZOO GoldenGolden",
        "L.L.C. EnterprisesBright",
        "SIA TechnologiesConsulting",
        "MarketingUrban LLC",
        "LLC \"GateInnovations\"",
        "OÜ PerformanceClear",
        "FitnessGreen L.L.C.",
        "OÜ PeakGreen",
        "LLC FitnessConsulting",
        "OU GateUrban",
        "MarketingVentures L.L.C.",
        "SP ZOO VenturesView",
        "GreenBright LLC",
        "InnovationsPath SIA 05000111774",
        "SP ZOO TechnologiesRealty",
        "SilverPerformance Sabiedrība ar ierobežotu atbildību",
        "LLC SunriseTechnologies",
        "OÜ PathView",
        "ViewPeak SIA",
        "MarketingGreen Sabiedrība ar ierobežotu atbildību",
        "HealthFitness OÜ",
        "L.L.C. EnterprisesInnovations",
        "FitnessInnovations LLC",
        "Sp. z.o.o. PeakGreen",
        "Sp. z.o.o. ClearVentures",
        "ViewTechnologies Sp. z.o.o.",
        "ClearMarketing OU",
        "TechnologiesGate OÜ",
        "Sp. z.o.o. HealthPeak",
        "Sabiedrība ar ierobežotu atbildību BlueSilver",
        "HarmonyMarketing LLC",
        "WaveLine L.L.C.",
        "TechnologiesInnovations OÜ",
        "ConsultingHarmony OÜ",
        "SilverBright Sp. z.o.o.",
        "L.L.C. SolutionsBlue",
        "SP ZOO NestTechnologies",
        "WaveLine Sabiedrība ar ierobežotu atbildību",
        "SilverClear OÜ",
        "SIA ClearUrban",
        "LLC BrightClear",
        "BlueSunrise SIA",
        "SolutionsNest L.L.C.",
        "LeafConsulting Sabiedrība ar ierobežotu atbildību",
        "OÜ SolutionsGreen",
        "Sabiedrība ar ierobežotu atbildību PathWave",
        "PeakPeak SIA",
        "LeafSunrise L.L.C.",
        "HarmonyLeaf Sp. z.o.o.",
        "UrbanHealth LLC",
        "LLC LeafEnterprises",
        "SolutionsEnterprises Sp. z.o.o.",
        "OÜ ClearSunrise",
        "SIA SunriseFitness",
        "SP ZOO \"InnovationsPeak\"",
        "Sp. z.o.o. PeakView",
        "L.L.C. MarketingNest",
        "'ConsultingPerformance' Sp. z.o.o. (bankrupted)",
        "ClearLeaf LLC",
        "SP ZOO EnterprisesSilver",
        "Sp. z.o.o. SolutionsVentures",
        "LLC VenturesGolden",
        "SIA UrbanGolden",
        "SIA FitnessBright",
        "L.L.C. InnovationsSolutions",
        "SP ZOO UrbanLine",
        "Sabiedrība ar ierobežotu atbildību VenturesMarketing",
        "Sp. z.o.o. WaveMarketing",
        "LeafWave Sabiedrība ar ierobežotu atbildību",
        "EnterprisesHealth SP ZOO",
        "RealtyHarmony OÜ",
        "VenturesGreen OU",
        "Sabiedrība ar ierobežotu atbildību FitnessLine",
        "SIA SolutionsPerformance",
        "L.L.C. WaveRealty",
        "LLC SunriseGate",
        "LLC GreenHarmony",
        "RealtyView LLC",
        "Sp. z.o.o. PathConsulting",
        "PerformanceTechnologies Sabiedrība ar ierobežotu atbildību",
        "EnterprisesBright Sp. z.o.o.",
        "PathUrban OÜ",
        "L.L.C. InnovationsLeaf",
        "SIA ConsultingWave",
        "NestClear Sabiedrība ar ierobežotu atbildību",
        "L.L.C. GateLine",
        "GoldenClear SP ZOO",
        "MarketingNest LLC",
        "OÜ UrbanSunrise",
        "LLC BrightLeaf",
        "SP ZOO PathPeak",
        "Sp. z.o.o. PeakPerformance",
        "PeakHealth LLC",
        "SunriseFitness OÜ",
        "PerformanceBlue LLC",
        "Sabiedrība ar ierobežotu atbildību GateWave",
        "LLC HealthConsulting",
        "OÜ PeakSunrise",
        "LLC HealthSolutions",
        "Sabiedrība ar ierobežotu atbildību LineTechnologies",
        "Sp. z.o.o. HarmonyHealth",
        "SunriseSilver OÜ",
        "LineTechnologies LLC",
        "ViewSilver LLC",
        "LinePerformance LLC",
        "HarmonyInnovations SP ZOO",
        "PathPeak OÜ",
        "WaveHealth LLC",
        "ConsultingPerformance Sabiedrība ar ierobežotu atbildību",
        "SP ZOO EnterprisesRealty",
        "SP ZOO HarmonyTechnologies",
        "SIA GoldenBlue",
        "SunriseGolden OÜ",
        "Sp. z.o.o. GreenSolutions",
        "Sabiedrība ar ierobežotu atbildību WaveMarketing",
        "SolutionsPerformance Sabiedrība ar ierobežotu atbildību",
        "InnovationsHealth SP ZOO",
        "UrbanVentures LLC",
        "L.L.C. BrightEnterprises",
        "OÜ ViewGreen",
        "SolutionsGolden SIA",
        "Sp. z.o.o. MarketingFitness",
        "ClearPath SIA",
        "BrightConsulting OU",
        "L.L.C. PerformanceTechnologies",
        "BlueHarmony SP ZOO",
        "Sabiedrība ar ierobežotu atbildību MarketingSolutions",
        "PeakGate L.L.C.",
        "PathSilver SIA",
        "SolutionsFitness Sp. z.o.o.",
        "L.L.C. WaveTechnologies",
        "L.L.C. PerformanceNest",
        "L.L.C. FitnessSunrise",
        "PeakUrban Sp. z.o.o.",
        "HarmonySilver Sabiedrība ar ierobežotu atbildību",
        "PeakBright SIA",
        "L.L.C. UrbanSunrise",
        "GateGolden L.L.C.",
        "SunriseConsulting LLC",
        "GoldenSilver L.L.C.",
        "PerformanceEnterprises OU",
        "FitnessSolutions  Sabiedrība ar ierobežotu atbildību",
        "NestView SIA",
        "SP ZOO BlueHarmony",
        "SIA LineGate",
        "PathRealty Sabiedrība ar ierobežotu atbildību",
        "SP ZOO EnterprisesTechnologies",
        "LLC BrightFitness",
        "RealtyMarketing LLC",
        "WaveNest OU",
        "SP ZOO ClearEnterprises",
        "GreenPath SP ZOO",
        "MarketingSolutions SP ZOO",
        "<<HarmonyGreen>> OU",
        "L.L.C. ConsultingPath",
        "SIA ViewLine",
        "GoldenTechnologies Sabiedrība ar ierobežotu atbildību",
        "HarmonyEnterprises Sp. z.o.o.",
        "BlueWave Sp. z.o.o.",
        "OÜ UrbanGolden",
        "LLC LineGreen",
        "FitnessInnovations SP ZOO",
        "SIA InnovationsPerformance",
        "SolutionsGolden SP ZOO",
        "LLC WaveRealty",
        "OU SunriseGolden",
        "HealthLeaf L.L.C.",
        "MarketingEnterprises SP ZOO",
        "SIA BlueGate",
        "EnterprisesGate SP ZOO",
        "Sabiedrība ar ierobežotu atbildību GreenConsulting",
        "LeafFitness Sp. z.o.o.",
        "SilverLeaf L.L.C.",
        "FitnessWave OÜ",
        "GateNest SIA",
        "SP ZOO SilverSunrise",
        "LLC VenturesTechnologies",
        "NestRealty LLC",
        "BlueSilver Sabiedrība ar ierobežotu atbildību",
        "GateSilver SP ZOO",
        "OÜ ConsultingBlue",
        "OÜ SunriseWave",
        "TechnologiesUrban Sabiedrība ar ierobežotu atbildību",
        "OÜ GateBright",
        "L.L.C. LeafBright",
        "SolutionsGreen SP ZOO",
        "InnovationsPath OÜ",
        "L.L.C. SunriseFitness",
        "GoldenLine L.L.C.",
        "GreenNest OÜ",
        "L.L.C. MarketingLeaf",
        "OÜ FitnessBlue",
        "BlueRealty SP ZOO",
        "PeakUrban LLC",
        "HarmonyUrban Sp. z.o.o.",
        "ViewSunrise LLC",
        "Sp. z.o.o. PathHealth",
        "MarketingSunrise L.L.C.",
        "GoldenGate Sp. z.o.o.",
        "LineRealty Sp. z.o.o.",
        "LLC FitnessNest",
        "ClearInnovations SP ZOO",
        "FitnessView OU",
        "LLC ClearBright",
        "Sp. z.o.o. BrightRealty",
        "BrightGate SP ZOO",
        "SP ZOO NestBright",
        "Sabiedrība ar ierobežotu atbildību ClearBlue",
        "Sp. z.o.o. SolutionsBlue",
        "HealthGate Sp. z.o.o.",
        "OU MarketingFitness",
        "Sabiedrība ar ierobežotu atbildību ConsultingGate",
        "TechnologiesGolden OU",
        "SIA InnovationsSolutions",
        "Sp. z.o.o. EnterprisesConsulting",
        "GreenPath OU",
        "FitnessPeak SIA",
        "UrbanClear Sp. z.o.o.",
        "HealthFitness SP ZOO",
        "EnterprisesMarketing OÜ",
        "L.L.C. HarmonyBlue",
};

std::vector<std::string> sanctioned = {
        "Clear Urban SIA",
        "ClearUrban VSIA",
        "Leafblue INc.",
        "MarketingVentures",
        "FitnessConsult",
        "WaveMarketing SP Zoo",
        "BrightConsulting OÜ",
        "WaveHealth LLC"
};

double calculateMatch(std::string textA, std::string textB, int cost) {
    int largest = (textA.size() > textB.size()) ? textA.size() : textB.size();
    double matchPct = (double)(largest - cost) / largest;
    return matchPct;
}

int main() {


    ClassicFuzzyMatching fuzzyMatching;

    std::vector<std::string> rows;

    for(int i = 0; i < companies.size(); i++) {
        std::string row = "";

        row.append(std::to_string(i)).append(";");
        for(int j = 0; j < sanctioned.size(); j++) {
            int cost = fuzzyMatching.levenDistance(companies[i], sanctioned[j]);
            double matchPct = calculateMatch(companies[i], sanctioned[j], cost);
            row.append(std::to_string(matchPct)).append(";");
        }
        rows.push_back(row);
    }

    for(auto row : rows) {
        std::cout << row << "\n";
    }

    TokenBasedMatching tkb;
    tkb.loadSanctionsList(sanctioned);
    auto matches = tkb.loadTargetEntities(companies);

    tkb.printMatches(matches);

//    std::string A = "SIA Drendon Brendon";
//    std::string B = "SIA Dainis Briedis";
//
//    int cost = fuzzyMatching.levenDistance(A, B);
//    double match = calculateMatch(A, B, cost);

    return 0;
}


